import streamlit as st
import pandas as pd
import plotly.express as px
import io
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
from google_drive_client import (
    consultar_datos_filtrados,
    obtener_ranking_municipios,
    obtener_todos_los_municipios,
    obtener_todos_los_departamentos
)


def create_variable_dictionary():
    """Crear diccionario de variables del dataset"""
    dictionary = {
        'Variable': [
            'mpio', 'dpto', 'recommendation_code', 'recommendation_text',
            'recommendation_topic', 'recommendation_priority', 'sentence_text',
            'sentence_similarity', 'paragraph_text', 'paragraph_similarity',
            'paragraph_id', 'page_number', 'predicted_class', 'prediction_confidence',
            'IPM_2018', 'PDET', 'Cat_IICA', 'Grupo_MDM', 'sentence_id', 'sentence_id_paragraph'
        ],
        'Descripci√≥n': [
            'Nombre del municipio',
            'Nombre del departamento',
            'C√≥digo √∫nico de la recomendaci√≥n',
            'Texto completo de la recomendaci√≥n',
            'Tema o categor√≠a de la recomendaci√≥n',
            'Indicador num√©rico de priorizaci√≥n (0=No, 1=S√≠)',
            'Texto de la oraci√≥n del PDD municipal',
            'Similitud sem√°ntica entre oraci√≥n y recomendaci√≥n (0-1)',
            'Texto completo del p√°rrafo que contiene la oraci√≥n',
            'Similitud sem√°ntica entre p√°rrafo y recomendaci√≥n (0-1)',
            'Identificador √∫nico del p√°rrafo',
            'N√∫mero de p√°gina del documento donde aparece el texto',
            'Clasificaci√≥n de ML: Incluida/Excluida como pol√≠tica p√∫blica',
            'Confianza del modelo de clasificaci√≥n (0-1)',
            '√çndice de Pobreza Multidimensional 2018',
            'Indicador PDET - Programa de Desarrollo con Enfoque Territorial (0=No, 1=S√≠)',
            'Categor√≠a del √çndice de Incidencia del Conflicto Armado',
            'Grupo de Capacidades Iniciales - Medici√≥n de Desempe√±o Municipal',
            'Identificador de oraci√≥n en el documento',
            'Identificador de oraci√≥n dentro del p√°rrafo'
        ]
    }
    return pd.DataFrame(dictionary)

def create_ranking_data(df, sentence_threshold, include_policy_only):
    """Crear datos de ranking de municipios"""
    ranking_data = df.copy()

    # Aplicar filtro de pol√≠tica si est√° activado
    if include_policy_only:
        ranking_data = ranking_data[
            (ranking_data['predicted_class'] == 'Incluida') |
            ((ranking_data['predicted_class'] == 'Excluida') & (ranking_data['prediction_confidence'] < 0.8))
            ]

    # Calcular ranking
    ranking_data = ranking_data.groupby(['mpio', 'dpto']).agg({
        'recommendation_code': lambda x: len(set(x[df.loc[x.index, 'sentence_similarity'] >= sentence_threshold])),
        'sentence_similarity': ['count', 'mean'],
        'IPM_2018': 'first',
        'PDET': 'first',
        'Cat_IICA': 'first',
        'Grupo_MDM': 'first'
    }).reset_index()

    # Aplanar columnas
    ranking_data.columns = ['Municipio', 'Departamento', 'Recomendaciones_Implementadas',
                            'Total_Oraciones', 'Similitud_Promedio', 'IPM_2018', 'PDET',
                            'Cat_IICA', 'Grupo_MDM']

    # Ordenar por recomendaciones implementadas
    ranking_data = ranking_data.sort_values('Recomendaciones_Implementadas', ascending=False)
    ranking_data['Ranking'] = range(1, len(ranking_data) + 1)

    # Reordenar columnas
    ranking_data = ranking_data[['Ranking', 'Municipio', 'Departamento', 'Recomendaciones_Implementadas',
                                 'Total_Oraciones', 'Similitud_Promedio', 'IPM_2018', 'PDET',
                                 'Cat_IICA', 'Grupo_MDM']]

    return ranking_data

def create_excel_file(filtered_data, ranking_data, dictionary_df):
    """Crear archivo Excel con ranking, datos filtrados y diccionario"""
    output = io.BytesIO()

    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # Pesta√±a 1: Ranking de municipios
        ranking_data.to_excel(writer, sheet_name='Ranking_Municipios', index=False)

        # Pesta√±a 2: Datos filtrados
        filtered_data.to_excel(writer, sheet_name='Datos_Filtrados', index=False)

        # Pesta√±a 3: Diccionario
        dictionary_df.to_excel(writer, sheet_name='Diccionario_Variables', index=False)

        # Formatear hojas
        workbook = writer.book
        header_fill = PatternFill(start_color='1f77b4', end_color='1f77b4', fill_type='solid')
        header_font = Font(color='FFFFFF', bold=True)

        # Formatear todas las hojas
        for sheet_name in ['Ranking_Municipios', 'Datos_Filtrados', 'Diccionario_Variables']:
            worksheet = writer.sheets[sheet_name]
            for cell in worksheet[1]:
                cell.fill = header_fill
                cell.font = header_font
                cell.alignment = Alignment(horizontal='center')

        # Ajustar ancho de columnas espec√≠ficas
        # Ranking
        ranking_sheet = writer.sheets['Ranking_Municipios']
        ranking_sheet.column_dimensions['A'].width = 25  # Municipio
        ranking_sheet.column_dimensions['B'].width = 20  # Departamento

        # Diccionario
        dict_sheet = writer.sheets['Diccionario_Variables']
        dict_sheet.column_dimensions['A'].width = 25
        dict_sheet.column_dimensions['B'].width = 80

    output.seek(0)
    return output

def to_csv_utf8_bom(df):
    """Convertir DataFrame a CSV con codificaci√≥n UTF-8 BOM"""
    # Crear CSV como string
    csv_string = df.to_csv(index=False, encoding='utf-8')
    # Agregar BOM (Byte Order Mark) para UTF-8
    csv_bytes = '\ufeff' + csv_string
    return csv_bytes.encode('utf-8')

def mostrar_paginacion_coincidencias(rec_code, level="oraciones"):
    """Mostrar controles de paginaci√≥n para coincidencias de una recomendaci√≥n espec√≠fica"""
    pagina_key = f'pagina_actual_coincidencias_{rec_code}_{level}'
    total_paginas_key = f'total_paginas_coincidencias_{rec_code}_{level}'

    pagina_actual = st.session_state.get(pagina_key, 1)
    total_paginas = st.session_state.get(total_paginas_key, 1)

    if total_paginas <= 1:
        return

    st.markdown("---")

    # Crear columnas para centrar la paginaci√≥n
    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        # Crear botones de paginaci√≥n
        cols = st.columns([1, 1, 3, 1, 1])

        # Bot√≥n anterior
        with cols[0]:
            if st.button("‚óÄ", disabled=(pagina_actual <= 1), key=f"prev_page_{level}_{rec_code}"):
                st.session_state[pagina_key] = max(1, pagina_actual - 1)
                st.rerun()

        # N√∫meros de p√°gina como botones
        with cols[2]:
            # Mostrar p√°ginas como botones (m√°ximo 5 p√°ginas visibles)
            paginas_a_mostrar = []

            if total_paginas <= 5:
                paginas_a_mostrar = list(range(1, total_paginas + 1))
            else:
                if pagina_actual <= 3:
                    paginas_a_mostrar = [1, 2, 3, 4, 5]
                elif pagina_actual >= total_paginas - 2:
                    paginas_a_mostrar = list(range(total_paginas - 4, total_paginas + 1))
                else:
                    paginas_a_mostrar = list(range(pagina_actual - 2, pagina_actual + 3))

            # Crear mini-columnas para cada n√∫mero de p√°gina
            mini_cols = st.columns(len(paginas_a_mostrar))

            for i, pagina in enumerate(paginas_a_mostrar):
                with mini_cols[i]:
                    if pagina == pagina_actual:
                        st.markdown(
                            f"<div style='background: #007bff; color: white; text-align: center; padding: 4px; border-radius: 4px; margin: 2px;'>{pagina}</div>",
                            unsafe_allow_html=True)
                    else:
                        if st.button(str(pagina), key=f"page_{level}_{rec_code}_{pagina}"):
                            st.session_state[pagina_key] = pagina
                            st.rerun()

        # Bot√≥n siguiente
        with cols[4]:
            if st.button("‚ñ∂", disabled=(pagina_actual >= total_paginas), key=f"next_page_{level}_{rec_code}"):
                st.session_state[pagina_key] = min(total_paginas, pagina_actual + 1)
                st.rerun()

def render_ficha_municipal():
    """Vista municipal optimizada"""

    st.sidebar.markdown("### üîß Filtros Municipales")

    # Obtener TODOS los territorios de la muestra (sin filtros)
    todos_municipios_df = obtener_todos_los_municipios()
    todos_departamentos_df = obtener_todos_los_departamentos()

    if todos_departamentos_df.empty:
        st.error("No se pudieron cargar los territorios")
        return

    # Crear listas para selectbox
    departamentos_lista = ['Todos'] + todos_departamentos_df['Departamento'].tolist()

    # Filtro departamento
    selected_department = st.sidebar.selectbox(
        "Departamento:",
        options=departamentos_lista,
        index=1 if len(departamentos_lista) > 1 else 0
    )

    # Filtro municipio - SIEMPRE mostrar todos los municipios disponibles
    if selected_department == 'Todos':
        municipios_disponibles = todos_municipios_df['Municipio'].unique().tolist()
    else:
        # Filtrar municipios del departamento seleccionado
        dpto_municipios = todos_municipios_df[
            todos_municipios_df['Departamento'] == selected_department
            ]['Municipio'].tolist()
        municipios_disponibles = dpto_municipios

    municipios_lista = ['Todos'] + sorted(municipios_disponibles)

    selected_municipality = st.sidebar.selectbox(
        "Municipio:",
        options=municipios_lista,
        index=1 if len(municipios_lista) > 1 else 0
    )

    # Umbral local
    sentence_threshold = st.sidebar.slider(
        "Umbral de Similitud:",
        min_value=0.0,
        max_value=1.0,
        value=0.6,
        step=0.05,
        help="Filtro para mostrar solo oraciones con similitud igual o superior al valor seleccionado"
    )

    # Filtro de pol√≠tica
    include_policy_only = st.sidebar.checkbox(
        "Solo secciones de pol√≠tica p√∫blica",
        value=True,
        help="Filtrar para incluir solo contenido clasificado como pol√≠tica p√∫blica"
    )

    # Obtener datos filtrados
    datos_filtrados = consultar_datos_filtrados(
        umbral_similitud=sentence_threshold,
        departamento=selected_department if selected_department != 'Todos' else None,
        municipio=selected_municipality if selected_municipality != 'Todos' else None,
        solo_politica_publica=include_policy_only
    )

    high_quality_sentences = datos_filtrados[datos_filtrados['sentence_similarity'] >= sentence_threshold]

    # VALIDACI√ìN PARA MUNICIPIO SIN DATOS
    if selected_municipality != 'Todos' and high_quality_sentences.empty:
        st.warning(f"""
        ‚ö†Ô∏è **Sin datos para mostrar**

        El municipio **{selected_municipality}** ({selected_department}) no tiene informaci√≥n 
        disponible con el umbral de similitud actual ({sentence_threshold:.2f}).

        **Opciones:**
        - Reduzca el umbral de similitud en el panel izquierdo
        - Desactive el filtro "Solo secciones de pol√≠tica p√∫blica" 
        - Seleccione un municipio diferente
        """)
        return

    # Renderizar seg√∫n selecci√≥n
    if selected_municipality != 'Todos':
        _render_vista_municipio_especifico(
            selected_municipality,
            selected_department,
            sentence_threshold,
            include_policy_only,
            datos_filtrados,
            high_quality_sentences
        )
    else:
        _render_vista_comparativa(selected_department, sentence_threshold, datos_filtrados)

def _render_vista_municipio_especifico(municipio, departamento, sentence_threshold, include_policy_only,
                                       datos_municipio, high_quality_sentences):
    """Vista espec√≠fica de municipio"""

    if datos_municipio.empty:
        st.warning(f"No se encontraron datos para {municipio}")
        return

    # Encabezado
    muni_info = datos_municipio.iloc[0]
    st.markdown(f"""
    <div style="background: linear-gradient(90deg, #1f77b4 0%, #17a2b8 100%); 
                color: white; 
                padding: 2rem; 
                border-radius: 15px; 
                margin-bottom: 2rem;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
        <h1 style="margin: 0.5rem 0 0 0; font-size: 3rem; font-weight: 700;">{municipio}</h1>
        <p style="margin: 0.5rem 0 0 0; font-size: 1.5rem; opacity: 0.9;">{departamento}, Colombia</p>
    </div>
    """, unsafe_allow_html=True)

    # Descripci√≥n de funcionalidad
    with st.expander("‚ÑπÔ∏è Acerca de este Dashboard", expanded=False):
        st.markdown("""
            ### üìã Ficha Municipal - An√°lisis de Implementaci√≥n de Recomendaciones

            Este dashboard permite analizar el nivel de menci√≥n de las recomendaciones de pol√≠tica p√∫blica 
            en los planes de desarrollo (PDD) de los municipios y departamentos de Colombia mediante t√©cnicas de similitud sem√°ntica.

            **Funcionalidades principales:**
            - **Filtrado:** Seleccione departamento y municipio para an√°lisis espec√≠fico
            - **Umbral de similitud:** Ajuste el nivel m√≠nimo de coincidencia entre recomendaciones y texto municipal (entre m√°s alto m√°s calidad tendr√°n las coincidencias)
            - **Ranking:** Compare el desempe√±o relativo entre municipios
            - **An√°lisis detallado:** Explore recomendaciones espec√≠ficas y oraciones relacionadas

            **C√≥mo interpretar los resultados:**
            - Mayor similitud (0 - 1) indica una coincidencia de mejor calidad entre el texto del PDD y las recomendaciones
            - El ranking se basa en el n√∫mero total de recomendaciones implementadas
            """)

    # Informaci√≥n b√°sica
    st.markdown("### üìä Informaci√≥n B√°sica")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        ipm_raw = muni_info.get('IPM_2018', 'N/A')

        # Use pandas to_numeric for robust conversion
        try:
            ipm_numeric = pd.to_numeric(ipm_raw, errors='coerce')
            if pd.notna(ipm_numeric):
                ipm = f"{ipm_numeric:.2f}"
            else:
                ipm = 'N/A'
        except:
            ipm = 'N/A'

        st.markdown(f"""
            <div style="background-color: #f8f9fa; padding: 1rem; border-radius: 10px; text-align: center; border-left: 4px solid #6c757d;">
                <h4 style="margin: 0; color: #6c757d;">IPM 2018 
                    <span title="√çndice de Pobreza Multidimensional 2018: Mide la pobreza considerando m√∫ltiples dimensiones como educaci√≥n, salud, trabajo, etc. Valores m√°s altos indican mayor pobreza." 
                          style="cursor: help; color: #007bff;">‚ìò</span>
                </h4>
                <h3 style="margin: 0.5rem 0 0 0; color: #333;">{ipm}</h3>
            </div>
            """, unsafe_allow_html=True)

    with col2:
        pdet = muni_info.get('PDET', 'N/A')
        pdet_color = "#28a745" if pdet == 1 else "#dc3545" if pdet == 0 else "#6c757d"
        pdet_text = "S√ç" if pdet == 1 else "NO" if pdet == 0 else "N/A"
        st.markdown(f"""
            <div style="background-color: #f8f9fa; padding: 1rem; border-radius: 10px; text-align: center; border-left: 4px solid {pdet_color};">
                <h4 style="margin: 0; color: #6c757d;">PDET 
                    <span title="Programa de Desarrollo con Enfoque Territorial: Indica si el municipio est√° incluido en este programa para territorios afectados por el conflicto." 
                          style="cursor: help; color: #007bff;">‚ìò</span>
                </h4>
                <h3 style="margin: 0.5rem 0 0 0; color: {pdet_color};">{pdet_text}</h3>
            </div>
            """, unsafe_allow_html=True)

    with col3:
        cat_iica = muni_info.get('Cat_IICA', 'N/A')
        st.markdown(f"""
            <div style="background-color: #f8f9fa; padding: 1rem; border-radius: 10px; text-align: center; border-left: 4px solid #17a2b8;">
                <h4 style="margin: 0; color: #6c757d;">Categor√≠a IICA 
                    <span title="√çndice de Incidencia del Conflicto Armado: Clasifica los municipios en 5 categor√≠as seg√∫n el nivel de incidencia del conflicto armado, desde baja hasta muy alta incidencia. Incluye variables como acciones armadas, desplazamiento forzado, cultivos de coca y homicidios." 
                          style="cursor: help; color: #007bff;">‚ìò</span>
                </h4>
                <h3 style="margin: 0.5rem 0 0 0; color: #333;">{cat_iica if pd.notna(cat_iica) else 'N/A'}</h3>
            </div>
            """, unsafe_allow_html=True)

    with col4:
        grupo_mdm = muni_info.get('Grupo_MDM', 'N/A')
        st.markdown(f"""
            <div style="background-color: #f8f9fa; padding: 1rem; border-radius: 10px; text-align: center; border-left: 4px solid #ffc107;">
                <h4 style="margin: 0; color: #6c757d;">Grupo MDM 
                    <span title="Grupo de Capacidades Iniciales de la Medici√≥n de Desempe√±o Municipal: Clasifica los municipios en 6 categor√≠as seg√∫n sus capacidades econ√≥micas, urbanas y de recursos. La clasificaci√≥n va desde C (capitales) con las mayores capacidades, seguida de G1, G2, G3, G4, hasta G5 con las menores capacidades iniciales." 
                          style="cursor: help; color: #007bff;">‚ìò</span>
                </h4>
                <h3 style="margin: 0.5rem 0 0 0; color: #333;">{grupo_mdm if pd.notna(grupo_mdm) else 'N/A'}</h3>
            </div>
            """, unsafe_allow_html=True)

    st.markdown("---")

    # An√°lisis de implementaci√≥n
    _render_analisis_implementacion_municipio(datos_municipio, high_quality_sentences, municipio, sentence_threshold,
                                              include_policy_only)

    st.markdown("---")

    # An√°lisis detallado de recomendaciones
    _render_analisis_detallado_recomendaciones(high_quality_sentences)

    st.markdown("---")

    # Diccionario de recomendaciones
    _render_diccionario_recomendaciones(datos_municipio, municipio, include_policy_only)


def _render_vista_comparativa(selected_department, sentence_threshold, datos_comparativos):
    """Vista comparativa de m√∫ltiples municipios"""

    st.markdown(f"""
    <div style="background: linear-gradient(90deg, #6c757d 0%, #495057 100%); 
                color: white; 
                padding: 2rem; 
                border-radius: 15px; 
                margin-bottom: 2rem; 
                text-align: center;">
        <h1>üìä Vista Comparativa</h1>
        <p>{f"Departamento: {selected_department}" if selected_department != 'Todos' else "Todos los municipios"}</p>
    </div>
    """, unsafe_allow_html=True)

    if datos_comparativos.empty:
        st.warning("No hay datos disponibles con los filtros actuales")
        return

    # M√©tricas resumen
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Municipios", datos_comparativos['mpio'].nunique())
    with col2:
        st.metric("Departamentos", datos_comparativos['dpto'].nunique())
    with col3:
        st.metric("Recomendaciones", datos_comparativos['recommendation_code'].nunique())
    with col4:
        avg_similarity = datos_comparativos['sentence_similarity'].mean()
        st.metric("Similitud Promedio", f"{avg_similarity:.3f}")

    st.info("üí° Seleccione un municipio espec√≠fico para ver el reporte detallado")


def _render_analisis_implementacion_municipio(datos_municipio, high_quality_sentences, municipio, sentence_threshold,
                                              include_policy_only):
    """An√°lisis de implementaci√≥n para municipio espec√≠fico"""

    st.markdown("### üìà An√°lisis de Implementaci√≥n")

    # Calcular m√©tricas
    recomendaciones_implementadas = high_quality_sentences['recommendation_code'].nunique()

    # Recomendaciones prioritarias implementadas
    recomendaciones_prioritarias = high_quality_sentences[
        high_quality_sentences['recommendation_priority'] == 1
        ]['recommendation_code'].nunique()

    # Obtener ranking general
    ranking_data = obtener_ranking_municipios(
        umbral_similitud=sentence_threshold,
        solo_politica_publica=include_policy_only,
        top_n=None
    )

    ranking_position = "N/A"
    total_municipios = len(ranking_data)

    if not ranking_data.empty:
        municipio_rank = ranking_data[ranking_data['Municipio'] == municipio]
        if not municipio_rank.empty:
            ranking_position = municipio_rank['Ranking'].iloc[0]

    # Mostrar m√©tricas
    col1, col2, col3 = st.columns(3)

    with col1:
        ranking_text = f"{ranking_position}/{total_municipios}" if ranking_position != "N/A" else "N/A"
        st.markdown(f"""
            <div style="background-color: #fff3e0; padding: 1.5rem; border-radius: 10px; text-align: center;">
                <h2 style="margin: 0; color: #EF6C00; font-size: 2.5rem;">{ranking_text}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #EF6C00; font-weight: 500;">Ranking</p>
            </div>
            """, unsafe_allow_html=True)

    with col2:
        recs_text = f"{recomendaciones_implementadas}/75"
        st.markdown(f"""
            <div style="background-color: #e3f2fd; padding: 1.5rem; border-radius: 10px; text-align: center;">
                <h2 style="margin: 0; color: #1976d2; font-size: 2.5rem;">{recs_text}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #1976d2; font-weight: 500;">Recomendaciones Implementadas</p>
            </div>
            """, unsafe_allow_html=True)

    with col3:
        st.markdown(f"""
            <div style="background-color: #e8f5e8; padding: 1.5rem; border-radius: 10px; text-align: center;">
                <h2 style="margin: 0; color: #388e3c; font-size: 2.5rem;">{recomendaciones_prioritarias}/45</h2>
                <p style="margin: 0.5rem 0 0 0; color: #388e3c; font-weight: 500;">Prioritarias Implementadas</p>
            </div>
            """, unsafe_allow_html=True)

    # Top 5 Recomendaciones por Frecuencia
    if not high_quality_sentences.empty:
        st.markdown(" ")
        st.markdown(" ")

        # Header con bot√≥n de descarga
        col_header, col_download = st.columns([4, 1])
        with col_header:
            st.markdown("### Top 5 Recomendaciones m√°s Frecuentes")

        freq_analysis = high_quality_sentences.groupby('recommendation_code').agg({
            'sentence_similarity': 'count',
            'recommendation_text': 'first'
        }).reset_index()
        freq_analysis.columns = ['C√≥digo', 'Frecuencia', 'Texto']
        freq_analysis = freq_analysis.sort_values('Frecuencia', ascending=False).head(5)

        if not freq_analysis.empty:
            with col_download:
                csv_freq = to_csv_utf8_bom(freq_analysis)
                st.download_button(
                    label="üìÑ Descargar",
                    data=csv_freq,
                    file_name="top_5_recomendaciones_frecuentes.csv",
                    mime="text/csv; charset=utf-8",
                    help="Descargar datos del gr√°fico",
                    use_container_width=True
                )

            # Gr√°fico
            fig_freq = px.bar(
                freq_analysis,
                x='Frecuencia',
                y='C√≥digo',
                orientation='h',
                title='N√∫mero de Oraciones por Recomendaci√≥n',
                labels={'Frecuencia': 'N√∫mero de Oraciones', 'C√≥digo': 'C√≥digo de Recomendaci√≥n'},
                color='Frecuencia',
                color_continuous_scale='blues',
                hover_data={'Texto': True, 'Frecuencia': True}
            )
            fig_freq.update_layout(
                height=400,
                showlegend=False,
                coloraxis_showscale=False
            )
            st.plotly_chart(fig_freq, use_container_width=True)

        # Implementaci√≥n por Tema
        if 'recommendation_topic' in high_quality_sentences.columns:
            col_header2, col_download2 = st.columns([4, 1])
            with col_header2:
                st.markdown("#### Implementaci√≥n por Tema")

            topic_analysis = high_quality_sentences.groupby('recommendation_topic')[
                'recommendation_code'].nunique().reset_index()
            topic_analysis.columns = ['Tema', 'Recomendaciones_Implementadas']
            topic_analysis = topic_analysis.sort_values('Recomendaciones_Implementadas', ascending=False)

            if not topic_analysis.empty:
                with col_download2:
                    csv_topics = to_csv_utf8_bom(topic_analysis)
                    st.download_button(
                        label="üìÑ Descargar",
                        data=csv_topics,
                        file_name="implementacion_por_tema.csv",
                        mime="text/csv; charset=utf-8",
                        help="Descargar datos del gr√°fico",
                        use_container_width=True
                    )

                # Gr√°fico
                fig_heatmap = px.bar(
                    topic_analysis,
                    x='Recomendaciones_Implementadas',
                    y='Tema',
                    orientation='h',
                    title='Recomendaciones Implementadas por Tema',
                    labels={'Recomendaciones_Implementadas': 'N√∫mero de Recomendaciones', 'Tema': ''},
                    color='Recomendaciones_Implementadas',
                    color_continuous_scale='viridis'
                )
                fig_heatmap.update_layout(
                    height=400,
                    showlegend=False,
                    yaxis={'categoryorder': 'total ascending'},
                    margin=dict(l=150, r=50, t=80, b=50),
                    coloraxis_showscale=False
                )
                st.plotly_chart(fig_heatmap, use_container_width=True)


def _render_analisis_detallado_recomendaciones(high_quality_sentences):
    """An√°lisis detallado de recomendaciones con pesta√±as jer√°rquicas"""

    st.markdown("### üîç An√°lisis detallado de recomendaciones")

    if not high_quality_sentences.empty:
        # Selector de recomendaci√≥n
        available_recommendations = high_quality_sentences['recommendation_code'].unique().tolist()

        selected_rec_code = st.selectbox(
            "Seleccione una recomendaci√≥n:",
            options=available_recommendations,
            format_func=lambda
                x: f"{x} - {high_quality_sentences[high_quality_sentences['recommendation_code'] == x]['recommendation_text'].iloc[0][:60]}...",
            key="detailed_rec_select",
            label_visibility="collapsed"
        )

        if selected_rec_code:
            rec_data = high_quality_sentences[
                high_quality_sentences['recommendation_code'] == selected_rec_code].copy()

            # Mostrar texto de la recomendaci√≥n
            rec_text = rec_data['recommendation_text'].iloc[0]
            st.markdown("**Texto de la Recomendaci√≥n:**")
            st.info(rec_text)

            # Pesta√±as de navegaci√≥n jer√°rquica
            tab = st.segmented_control(
                "Nivel de an√°lisis:",
                ["üìù P√°rrafos", "üí¨ Oraciones"],
                selection_mode="single",
                default="üí¨ Oraciones",
                key="hierarchy_tabs"
            )

            # PESTA√ëA 1: NIVEL DE P√ÅRRAFO
            if tab == "üìù P√°rrafos":
                st.markdown("**An√°lisis por P√°rrafos:**")

                # Agrupar por p√°rrafo y calcular similitud a nivel de p√°rrafo
                paragraph_analysis = rec_data.groupby(['paragraph_id', 'paragraph_text']).agg({
                    'paragraph_similarity': 'first',
                    'page_number': 'first',
                    'sentence_similarity': ['count', 'mean', 'max'],
                    'predicted_class': lambda x: x.mode()[0] if not x.empty else 'N/A'
                }).reset_index()

                paragraph_analysis.columns = ['ID_P√°rrafo', 'Texto_P√°rrafo', 'Similitud_P√°rrafo', 'P√°gina',
                                              'Num_Oraciones', 'Similitud_Prom', 'Similitud_Max',
                                              'Clasificaci√≥n_ML']
                paragraph_analysis = paragraph_analysis.sort_values('Similitud_Prom', ascending=False)

                # PAGINACI√ìN PARA P√ÅRRAFOS
                coincidencias_por_pagina = 5
                total_coincidencias = len(paragraph_analysis)
                total_paginas = max(1, (total_coincidencias - 1) // coincidencias_por_pagina + 1)

                # Inicializar p√°gina actual para p√°rrafos de esta recomendaci√≥n
                pagina_key = f'pagina_actual_coincidencias_{selected_rec_code}_parrafos'
                if pagina_key not in st.session_state:
                    st.session_state[pagina_key] = 1

                # Validar que la p√°gina actual no exceda el total
                if st.session_state[pagina_key] > total_paginas:
                    st.session_state[pagina_key] = 1

                pagina_actual = st.session_state[pagina_key]

                # Aplicar paginaci√≥n
                inicio = (pagina_actual - 1) * coincidencias_por_pagina
                fin = inicio + coincidencias_por_pagina
                paragraph_analysis_paginado = paragraph_analysis.iloc[inicio:fin]

                # Guardar en session state para controles de paginaci√≥n
                st.session_state[f'total_paginas_coincidencias_{selected_rec_code}_parrafos'] = total_paginas

                # Mostrar informaci√≥n de paginaci√≥n
                st.write(
                    f"üìã Mostrando {len(paragraph_analysis_paginado)} de {total_coincidencias} p√°rrafos (P√°gina {pagina_actual} de {total_paginas})")

                # Mostrar p√°rrafos paginados
                for idx, row in paragraph_analysis_paginado.iterrows():
                    with st.expander(
                            f"P√°rrafo {row['ID_P√°rrafo']} - Similitud Promedio: {row['Similitud_Prom']:.3f}",
                            expanded=idx == paragraph_analysis_paginado.index[0]):  # Solo el primero expandido
                        col1, col2 = st.columns([3, 1])

                        with col1:
                            st.write("**Contenido del P√°rrafo:**")
                            # Truncar texto muy largo
                            para_text = row['Texto_P√°rrafo'][:800] + "..." if len(
                                row['Texto_P√°rrafo']) > 800 else row['Texto_P√°rrafo']
                            st.write(para_text)

                        with col2:
                            st.write("**M√©tricas:**")
                            st.write(f"**ID P√°gina:** {row['P√°gina']}")
                            st.write(f"**ID P√°rrafo:** {row['ID_P√°rrafo']}")
                            st.write(f"**Similitud P√°rrafo:** {row['Similitud_P√°rrafo']:.3f}")

                # Mostrar controles de paginaci√≥n para p√°rrafos
                mostrar_paginacion_coincidencias(selected_rec_code, "parrafos")

            # PESTA√ëA 2: NIVEL DE ORACI√ìN
            else:  # "üí¨ Oraciones"
                st.markdown("**An√°lisis por Oraciones:**")

                sentence_analysis = rec_data.sort_values('sentence_similarity', ascending=False)

                # PAGINACI√ìN PARA ORACIONES
                coincidencias_por_pagina = 5
                total_coincidencias = len(sentence_analysis)
                total_paginas = max(1, (total_coincidencias - 1) // coincidencias_por_pagina + 1)

                # Inicializar p√°gina actual para oraciones de esta recomendaci√≥n
                pagina_key = f'pagina_actual_coincidencias_{selected_rec_code}_oraciones'
                if pagina_key not in st.session_state:
                    st.session_state[pagina_key] = 1

                # Validar que la p√°gina actual no exceda el total
                if st.session_state[pagina_key] > total_paginas:
                    st.session_state[pagina_key] = 1

                pagina_actual = st.session_state[pagina_key]

                # Aplicar paginaci√≥n
                inicio = (pagina_actual - 1) * coincidencias_por_pagina
                fin = inicio + coincidencias_por_pagina
                sentence_analysis_paginado = sentence_analysis.iloc[inicio:fin]

                # Mostrar informaci√≥n de paginaci√≥n
                st.write(
                    f"üìã Mostrando {len(sentence_analysis_paginado)} de {total_coincidencias} oraciones (P√°gina {pagina_actual} de {total_paginas})")

                # Mostrar oraciones paginadas
                for idx, (_, row) in enumerate(sentence_analysis_paginado.iterrows()):
                    sentence_id = row.get('sentence_id_paragraph', f'S{idx + 1}')

                    with st.expander(f"Oraci√≥n {sentence_id} - Similitud: {row['sentence_similarity']:.3f}",
                                     expanded=idx == 0):  # Solo la primera expandida
                        col1, col2 = st.columns([3, 1])

                        with col1:
                            st.write("**Contenido:**")
                            st.write(row['sentence_text'])

                        with col2:
                            st.write("**M√©tricas:**")
                            if 'sentence_id' in row and pd.notna(row['sentence_id']):
                                st.write(f"**ID Oraci√≥n:** {row['sentence_id']}")
                            st.write(f"**ID P√°gina:** {row['page_number']}")
                            st.write(f"**ID P√°rrafo:** {row.get('paragraph_id', 'N/A')}")
                            st.write(f"**Similitud Oraci√≥n:** {row['sentence_similarity']:.3f}")
                            st.write(f"**Clasificaci√≥n ML:** {row['predicted_class']}")

                # Mostrar controles de paginaci√≥n para oraciones
                mostrar_paginacion_coincidencias(selected_rec_code, "oraciones")

    else:
        st.info("No hay recomendaciones disponibles con el filtro actual.")

def _render_diccionario_recomendaciones(datos_municipio, municipio, include_policy_only):
    """Diccionario de recomendaciones"""

    st.markdown("### üìñ Diccionario de Recomendaciones")

    # Usar datos del municipio espec√≠fico
    dict_data = datos_municipio

    # Obtener recomendaciones √∫nicas con sus detalles
    recommendations_dict = dict_data.groupby('recommendation_code').agg({
        'recommendation_text': 'first',
        'recommendation_topic': 'first',
        'recommendation_priority': 'first',
        'sentence_similarity': ['count', 'mean', 'max']
    }).reset_index()

    recommendations_dict.columns = ['C√≥digo', 'Texto', 'Tema', 'Priorizado_GN', 'Total_Menciones',
                                    'Similitud_Promedio', 'Similitud_M√°xima']
    recommendations_dict = recommendations_dict.sort_values('C√≥digo')

    # Opciones de b√∫squeda y filtro
    col1, col2, col3 = st.columns([2, 1, 1])

    with col1:
        search_term = st.text_input(
            "üîç Buscar recomendaci√≥n:",
            placeholder="Ingrese c√≥digo o palabras clave...",
            help="Busque por c√≥digo de recomendaci√≥n o palabras en el texto",
            key=f"search_dict_{municipio}"
        )

    with col2:
        if 'recommendation_topic' in dict_data.columns:
            available_topics = ['Todos'] + sorted(
                dict_data['recommendation_topic'].dropna().unique().tolist())
            selected_topic = st.selectbox(
                "Filtrar por tema:",
                options=available_topics,
                index=0,
                key=f"topic_dict_{municipio}"
            )
        else:
            selected_topic = 'Todos'

    with col3:
        priority_filter = st.selectbox(
            "Prioridad GN:",
            options=['Todos', 'Solo priorizadas', 'Solo no priorizadas'],
            index=0,
            key=f"priority_dict_{municipio}"
        )

    # Aplicar filtros
    filtered_dict = recommendations_dict.copy()

    if search_term:
        mask = (
                filtered_dict['C√≥digo'].str.contains(search_term, case=False, na=False) |
                filtered_dict['Texto'].str.contains(search_term, case=False, na=False)
        )
        filtered_dict = filtered_dict[mask]

    if selected_topic != 'Todos':
        filtered_dict = filtered_dict[filtered_dict['Tema'] == selected_topic]

    if priority_filter == 'Solo priorizadas':
        filtered_dict = filtered_dict[filtered_dict['Priorizado_GN'] == 1]
    elif priority_filter == 'Solo no priorizadas':
        filtered_dict = filtered_dict[filtered_dict['Priorizado_GN'] == 0]

    # PAGINACI√ìN
    recomendaciones_por_pagina = 5
    total_recomendaciones = len(filtered_dict)
    total_paginas = max(1, (total_recomendaciones - 1) // recomendaciones_por_pagina + 1)

    # Clave √∫nica para esta secci√≥n
    pagina_key = f'pagina_dict_recs_{municipio.replace(" ", "_")}'
    if pagina_key not in st.session_state:
        st.session_state[pagina_key] = 1

    # Resetear p√°gina cuando cambian los filtros
    if search_term or selected_topic != 'Todos' or priority_filter != 'Todos':
        # Solo resetear si hay filtros activos y cambi√≥ el contenido
        if pagina_key in st.session_state and st.session_state[pagina_key] > total_paginas:
            st.session_state[pagina_key] = 1

    # Validar p√°gina actual
    if st.session_state[pagina_key] > total_paginas:
        st.session_state[pagina_key] = 1

    pagina_actual = st.session_state[pagina_key]

    # Aplicar paginaci√≥n
    inicio = (pagina_actual - 1) * recomendaciones_por_pagina
    fin = inicio + recomendaciones_por_pagina
    filtered_dict_paginado = filtered_dict.iloc[inicio:fin]

    # Mostrar contador de resultados con informaci√≥n de paginaci√≥n
    st.markdown(f"**Mostrando {len(filtered_dict_paginado)} de {total_recomendaciones} recomendaciones (P√°gina {pagina_actual} de {total_paginas})**")

    # Mostrar recomendaciones
    if not filtered_dict_paginado.empty:
        for idx, row in filtered_dict_paginado.iterrows():
            with st.expander(f"**{row['C√≥digo']}** - {row['Texto'][:80]}...", expanded=False):
                col1, col2 = st.columns([3, 1])

                with col1:
                    st.markdown("**Descripci√≥n completa:**")
                    st.write(row['Texto'])

                    if pd.notna(row['Tema']):
                        st.markdown(f"**Tema:** {row['Tema']}")

                with col2:
                    st.markdown("**Informaci√≥n:**")
                    st.write(f"**C√≥digo:** {row['C√≥digo']}")

                    if pd.notna(row['Priorizado_GN']):
                        priority_text = "S√≠" if row['Priorizado_GN'] == 1 else "No"
                        priority_color = "üî¥" if row['Priorizado_GN'] == 1 else "‚ö™"
                        st.write(f"**Priorizado por GN:** {priority_color} {priority_text}")

                    st.markdown("**Estad√≠sticas:**")
                    st.write(f"**Total menciones:** {row['Total_Menciones']}")
                    st.write(f"**Similitud promedio:** {row['Similitud_Promedio']:.3f}")
                    st.write(f"**Similitud m√°xima:** {row['Similitud_M√°xima']:.3f}")

        # Controles de paginaci√≥n
        if total_paginas > 1:
            st.markdown("---")
            col_prev, col_info, col_next = st.columns([1, 2, 1])

            with col_prev:
                if st.button("‚óÄ Anterior", disabled=(pagina_actual <= 1), key=f"prev_dict_{municipio}"):
                    st.session_state[pagina_key] = max(1, pagina_actual - 1)
                    st.rerun()

            with col_info:
                st.markdown(f"<center>P√°gina {pagina_actual} de {total_paginas}</center>", unsafe_allow_html=True)

            with col_next:
                if st.button("Siguiente ‚ñ∂", disabled=(pagina_actual >= total_paginas), key=f"next_dict_{municipio}"):
                    st.session_state[pagina_key] = min(total_paginas, pagina_actual + 1)
                    st.rerun()

    else:
        st.info("No se encontraron recomendaciones que coincidan con los criterios de b√∫squeda.")